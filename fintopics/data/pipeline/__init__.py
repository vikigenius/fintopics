# -*- coding: utf-8 -*-

"""Contains the base class for defining a data pipeline."""

import inspect
from abc import ABC, abstractmethod
from typing import Any, AsyncGenerator, Iterable, Optional


class Pipeline(ABC):
    """
    A base class for creating custom data pipelines.

    It works by chaining coroutines.
    """

    def __init__(self, pipelines=None, input_stream=None) -> None:
        """Initialises the pipeline.

        Args:
            pipelines (:obj:`list` of :obj:`Pipeline`): Downstream pipelines to
                run with the processed data. Defaults to None
            input_stream: An iterable containing data to be processed by the
                pipeline. Defaults to None
        """
        self._pipelines = pipelines if pipelines is not None else []
        self._input_stream = input_stream
        self._result_stream: Optional[Iterable[object]] = None

    @abstractmethod
    async def coroutine(self, data_stream) -> Optional[Iterable[object]]:
        """Processes the data and returns the result.

        Args:
            data_stream: The data stream to be processed by the pipeline
        """

    async def run(self, data_stream) -> None:
        """Runs the corutine and calls the downstream pipelines.

        Downstream pipelines are called after setting
        self._result to the coroutine's return value.

        Args:
            data_stream: The data to be processed by the pipeline
        """
        self._result_stream = await self.coroutine(data_stream)
        for pipeline in self._pipelines:
            await pipeline.run(self._result_stream)

    async def output_stream(self) -> AsyncGenerator[Any, None]:
        """Processes the data as a stream.

        The `result` property will change to
        reflect the most recently processed element of the input data stream.

        Yields:
            The result of running the coroutine function on a single element of
            the input data stream

        Raises:
            TypeError: If the input stream is not iterable
        """
        if inspect.isgenerator(self._input_stream):
            for data_obj in self._input_stream:
                self._result_stream = await self.coroutine(data_obj)
                yield self.result_stream
        elif inspect.isasyncgen(self._input_stream):
            async for async_data_obj in self._input_stream:
                self._result_stream = await self.coroutine(async_data_obj)
                yield self.result_stream
        else:
            raise TypeError('Input stream is not iterable')

    @property
    def result_stream(self):
        """The result generated by the coroutine.

        Returns None If the pipeline has not run yet
        """
        return self._result_stream
